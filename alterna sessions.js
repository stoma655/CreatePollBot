const { Telegraf, Markup } = require('telegraf');
// const LocalSession = require('telegraf-session-local');

const fs = require('fs');
const path = require('path');
const connectDB = require('./db');
const Tournament = require('./models/tournaments');
const Poll = require('./models/poll');
const User = require('./models/users');
const Registration = require('./models/registrations');
const Vote = require('./models/votes');
// const ChatUser = require('./models/chatUser');


const bot = new Telegraf('6302702257:AAHG8kSyIOcWSBBD3aAeiMR_dcO1OcfGp-U');

// const session = new LocalSession({ database: 'session_db.json' });
// bot.use(session.middleware());

// bot.use((new LocalSession({ storage: LocalSession.storageMemory })).middleware());

// async function setState(ctx, key, value) {
//   let user = await User.findOne({ telegramTag: ctx.from.username })
//   .catch(err => {
//       console.error(err);
//   });
//   if (user) {
//     user.state[key] = value; // –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –∫–ª—é—á –∏ –∑–Ω–∞—á–µ–Ω–∏–µ
//     user.markModified('state'); // —É–∫–∞–∑—ã–≤–∞–µ–º Mongoose, —á—Ç–æ –æ–±—ä–µ–∫—Ç –±—ã–ª –∏–∑–º–µ–Ω–µ–Ω
//     await user.save(); // —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
//   }
// };

async function setState(ctx, key, value, subKey) {
  let user = await User.findOne({ telegramTag: ctx.from.username })
  .catch(err => {
      console.error(err);
  });
  if (user) {
    if (subKey) { // –µ—Å–ª–∏ subKey –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω
      if (!user.state[key]) { // –µ—Å–ª–∏ —Å–≤–æ–π—Å—Ç–≤–∞ –µ—â–µ –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –µ–≥–æ
        user.state[key] = {};
      }
      user.state[key][subKey] = value; // –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –∫–ª—é—á –∏ –∑–Ω–∞—á–µ–Ω–∏–µ –≤–Ω—É—Ç—Ä–∏ –æ–±—ä–µ–∫—Ç–∞
    } else { // –µ—Å–ª–∏ subKey –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω
      user.state[key] = value; // –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –∫–ª—é—á –∏ –∑–Ω–∞—á–µ–Ω–∏–µ
    }
    user.markModified('state'); // —É–∫–∞–∑—ã–≤–∞–µ–º Mongoose, —á—Ç–æ –æ–±—ä–µ–∫—Ç –±—ã–ª –∏–∑–º–µ–Ω–µ–Ω
    await user.save(); // —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
  }
};


async function getState(ctx) {
  let user = await User.findOne({ telegramTag: ctx.from.username })
  .catch(err => {
      console.error(err);
  });
  ctx.state = user.state;
  return ctx;
};


async function deleteStateProperty(ctx, key, subKey) {
  let user = await User.findOne({ telegramTag: ctx.from.username })
  .catch(err => {
      console.error(err);
  });
  if (user && user.state[key]) {
    if (subKey) { // –µ—Å–ª–∏ subKey –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω
      delete user.state[key][subKey]; // —É–¥–∞–ª—è–µ–º —Å–≤–æ–π—Å—Ç–≤–æ –≤–Ω—É—Ç—Ä–∏ –æ–±—ä–µ–∫—Ç–∞
    } else { // –µ—Å–ª–∏ subKey –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω
      delete user.state[key]; // —É–¥–∞–ª—è–µ–º —Å–≤–æ–π—Å—Ç–≤–æ
    }
    user.markModified('state'); // —É–∫–∞–∑—ã–≤–∞–µ–º Mongoose, —á—Ç–æ –æ–±—ä–µ–∫—Ç –±—ã–ª –∏–∑–º–µ–Ω–µ–Ω
    await user.save(); // —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
  }
};


// –ü–∞—Ä–æ–ª—å –∞–¥–º–∏–Ω–∞
const ADMIN_PASSWORD = 'ss';

bot.start(async (ctx) => {
    ctx = await getState(ctx);
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ username
    if (!ctx.from.username) {
      // –ï—Å–ª–∏ username –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ username –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö Telegram, –ø—Ä–µ–∂–¥–µ —á–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–æ–≥–æ –±–æ—Ç–∞.');
    } else {
      // –ï—Å–ª–∏ username –µ—Å—Ç—å, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –∫–∞–∫ –æ–±—ã—á–Ω–æ
      // –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
      User.findOne({ telegramTag: ctx.from.username })
        .then(user => {
          if (!user) {
            // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω
            let newUser = new User({
              telegramName: ctx.from.first_name + ' ' + ctx.from.last_name, // –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–æ–ª–Ω–æ–µ –∏–º—è
              telegramTag: ctx.from.username,
              walletNumber: '', // –û—Å—Ç–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä –∫–æ—à–µ–ª—å–∫–∞ –ø—É—Å—Ç—ã–º
              chatId: ctx.chat.id, // —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ chatId
              state: {isAdmin: false}
            });
  
            // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            newUser.save()
              .then(() => {
                if (ctx.state.isAdmin) {
                  ctx.reply('–ü—Ä–∏–≤–µ—Ç, –∞–¥–º–∏–Ω!', Markup.keyboard([
                    ['–°–æ–∑–¥–∞—Ç—å —Ç—É—Ä–Ω–∏—Ä', '–ü–æ–∫–∞–∑–∞—Ç—å —Ç—É—Ä–Ω–∏—Ä—ã'],
                    ['–°–æ–∑–¥–∞—Ç—å –æ–ø—Ä–æ—Å']
                  ]).resize());
                } else {
                  ctx.reply(
                    '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!',
                    Markup.keyboard([
                      ['üîë –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ —Ç—É—Ä–Ω–∏—Ä', 'üéÆ –ú–æ–∏ —Ç—É—Ä–Ω–∏—Ä—ã']
                    ]).resize()
                  );
                }
              })
              .catch(error => console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error));
          } else {
            // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            ctx.reply(
              '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω–æ!',
              Markup.keyboard([
                ['üîë –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ —Ç—É—Ä–Ω–∏—Ä', 'üéÆ –ú–æ–∏ —Ç—É—Ä–Ω–∏—Ä—ã']
              ]).resize()
            );
          }
        })
        .catch(error => console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error));
    }
  });

  bot.command('test', (ctx) => {
    setState(ctx, 'newkey', 'vall');
  }); 


  bot.command('admin', (ctx) => {
    ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:');
    // ctx.session.awaitingPassword = true;
    setState(ctx, 'awaitingPassword', true);
  });

bot.command('user', (ctx) => {
  // ctx.session.isAdmin = false;
  setState(ctx, 'isAdmin', false);
  ctx.reply('–¢–µ–ø–µ—Ä—å –≤—ã –≤ —Ä–µ–∂–∏–º–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.');
});

// bot.command('/clear', (ctx) => {
//     // –û—á–∏—Å—Ç–∏—Ç–µ —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
//     ctx.session = null;
//     ctx.reply('–°–µ—Å—Å–∏—è —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω–∞!');
//   });
  
  bot.on('text', async (ctx) => {
    ctx = await getState(ctx);
    // if (ctx.session.awaitingPassword) {
    if (ctx.state.awaitingPassword) {
      if (ctx.message.text === ADMIN_PASSWORD) {
        console.log('—É—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ –∞–¥–º–∏–Ω–∞ –≤ —Ç—Ä—É')
        await setState(ctx, 'isAdmin', true);
        ctx.reply('–ü—Ä–∏–≤–µ—Ç, –∞–¥–º–∏–Ω!', Markup.keyboard([
          ['–°–æ–∑–¥–∞—Ç—å —Ç—É—Ä–Ω–∏—Ä', '–ü–æ–∫–∞–∑–∞—Ç—å —Ç—É—Ä–Ω–∏—Ä—ã'],
          ['–°–æ–∑–¥–∞—Ç—å –æ–ø—Ä–æ—Å', '–ó–∞–ø—Ä–æ—Å—ã –Ω–∞ —É—á–∞—Å—Ç–∏–µ'],
          ['–°–æ–∑–¥–∞—Ç—å –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ'] // –î–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—É—é –∫–Ω–æ–ø–∫—É –∑–¥–µ—Å—å
        ]).resize());
      } else {
        ctx.reply('–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å.');
      }
      setState(ctx, 'awaitingPassword', false);
      // ctx.session.awaitingPassword = false;
    // } else if (ctx.session.isAdmin) {
    } else if (ctx.state.isAdmin) {
      handleAdminText(ctx);
    } else {
      handleUserText(ctx);
    }
  });

  async function handleAdminText(ctx) {
    // if (ctx.session.awaitingPassword) {
    if (ctx.state.awaitingPassword) {
        if (ctx.message.text === ADMIN_PASSWORD) {
          ctx.session.isAdmin = true;
          ctx.reply('–ü—Ä–∏–≤–µ—Ç, –∞–¥–º–∏–Ω!', Markup.keyboard([
            ['–°–æ–∑–¥–∞—Ç—å —Ç—É—Ä–Ω–∏—Ä', '–ü–æ–∫–∞–∑–∞—Ç—å —Ç—É—Ä–Ω–∏—Ä—ã'],
            ['–°–æ–∑–¥–∞—Ç—å –æ–ø—Ä–æ—Å', '–ó–∞–ø—Ä–æ—Å—ã –Ω–∞ —É—á–∞—Å—Ç–∏–µ'],
            ['–°–æ–∑–¥–∞—Ç—å –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ'] // –î–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—É—é –∫–Ω–æ–ø–∫—É –∑–¥–µ—Å—å
          ]).resize());
        } else {
          ctx.reply('–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å.');
        }
        setState(ctx, 'awaitingPassword', false);
        // ctx.session.awaitingPassword = false;
      } else if (ctx.message.text === '–°–æ–∑–¥–∞—Ç—å –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ') {
        // –ü–æ–ª—É—á–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤
        Tournament.find().then(tournaments => {
          // –°–æ–∑–¥–∞–π—Ç–µ –º–∞—Å—Å–∏–≤ –∫–Ω–æ–ø–æ–∫. –ü–µ—Ä–≤–∞—è –∫–Ω–æ–ø–∫–∞ - "–î–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", –æ—Å—Ç–∞–ª—å–Ω—ã–µ - –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç—É—Ä–Ω–∏—Ä–∞
          const buttons = ['–î–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π'].concat(tournaments.map(tournament => tournament.name));
          ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ, –∫–æ–º—É —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ:', Markup.keyboard(buttons).oneTime().resize());
          setState(ctx, 'awaitingNotificationRecipient', true)
          // ctx.session.awaitingNotificationRecipient = true;
        }).catch(err => {
          console.log(err);
        });
      // } else if (ctx.session.awaitingNotificationRecipient) {
      } else if (ctx.state.awaitingNotificationRecipient) {
        // ctx.session.notificationRecipient = ctx.message.text;
        setState(ctx, 'notificationRecipient', ctx.message.text);
        ctx.reply('–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ–ø–æ–≤–µ—â–µ–Ω–∏—è:');
        setState(ctx, 'awaitingNotificationText', true);
        setState(ctx, 'awaitingNotificationRecipient', false);
        // ctx.session.awaitingNotificationText = true;
        // ctx.session.awaitingNotificationRecipient = false;
      // } else if (ctx.session.awaitingNotificationText) {
      } else if (ctx.state.awaitingNotificationText) {
        const notificationText = ctx.message.text;
        // ctx.session.awaitingNotificationText = false;
        setState(ctx, 'awaitingNotificationText', false);
      
        // if (ctx.session.notificationRecipient === '–î–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π') {
        if (ctx.state.notificationRecipient === '–î–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π') {
          // –ï—Å–ª–∏ –ø–æ–ª—É—á–∞—Ç–µ–ª—å - "–î–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
          User.find().then(users => {
            users.forEach(user => {
              bot.telegram.sendMessage(user.chatId, notificationText);
            });
          }).catch(err => {
            console.log(err);
          });
        } else {
          // –ï—Å–ª–∏ –ø–æ–ª—É—á–∞—Ç–µ–ª—å - –∏–≥—Ä–æ–∫–∏ —Ç—É—Ä–Ω–∏—Ä–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –≤ —ç—Ç–æ–º —Ç—É—Ä–Ω–∏—Ä–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
          // const tournamentName = ctx.session.notificationRecipient;
          const tournamentName = ctx.state.notificationRecipient; // –£–¥–∞–ª–∏—Ç–µ "–î–ª—è –∏–≥—Ä–æ–∫–æ–≤ " –∏–∑ –Ω–∞—á–∞–ª–∞ —Å—Ç—Ä–æ–∫–∏
          Tournament.findOne({ name: tournamentName }).then(tournament => {
            Registration.find({ tournamentId: tournament._id }).then(registrations => {
              registrations.forEach(registration => {
                User.findOne({ _id: registration.userId }).then(user => {
                  bot.telegram.sendMessage(user.chatId, notificationText);
                }).catch(err => {
                  console.log(err);
                });
              });
            }).catch(err => {
              console.log(err);
            });
          }).catch(err => {
            console.log(err);
          });
        }
      } else if (ctx.message.text === '–°–æ–∑–¥–∞—Ç—å —Ç—É—Ä–Ω–∏—Ä') {
        ctx.reply('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞:');
        setState(ctx, 'awaitingTournamentData', { step: 'name' })
        // ctx.session.awaitingTournamentData = { step: 'name' };
      // } else if (ctx.session.awaitingTournamentData && ctx.session.awaitingTournamentData.step === 'name') {
      } else if (ctx.state.awaitingTournamentData && ctx.state.awaitingTournamentData.step === 'name') {
          // ctx.session.awaitingTournamentData.name = ctx.message.text;
          setState(ctx, 'awaitingTournamentData', 'name', ctx.message.text);
          ctx.reply('–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞:');
          setState(ctx, 'awaitingTournamentData', 'step', 'description');
          // ctx.session.awaitingTournamentData.step = 'description';
        // } else if (ctx.session.awaitingTournamentData && ctx.session.awaitingTournamentData.step === 'description') {
        } else if (ctx.state.awaitingTournamentData && ctx.state.awaitingTournamentData.step === 'description') {
          // ctx.session.awaitingTournamentData.description = ctx.message.text;
          setState(ctx, 'awaitingTournamentData', 'description', ctx.message.text);

          ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–∞:');
            // ctx.session.awaitingTournamentData.step = 'imageUrl';
          setState(ctx, 'awaitingTournamentData', 'step', 'imageUrl');
        // } else if (ctx.session.awaitingTournamentData && ctx.session.awaitingTournamentData.step === 'imageUrl') {
        } else if (ctx.state.awaitingTournamentData && ctx.state.awaitingTournamentData.step === 'imageUrl') {
            // ctx.session.awaitingTournamentData.imageUrl = ctx.message.text;
            setState(ctx, 'awaitingTournamentData', 'imageUrl', ctx.message.text);

            // –ü–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
            ctx.reply('–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ —Ç—É—Ä–Ω–∏—Ä–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î:');
            // ctx.session.awaitingTournamentData.step = 'startDate';
            setState(ctx, 'awaitingTournamentData', 'step', 'startDate');
          // } else if (ctx.session.awaitingTournamentData && ctx.session.awaitingTournamentData.step === 'startDate') {
          } else if (ctx.state.awaitingTournamentData && ctx.state.awaitingTournamentData.step === 'startDate') {
            const startDate = new Date(ctx.message.text);
            if (isNaN(startDate)) {
              ctx.reply('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ —Ç—É—Ä–Ω–∏—Ä–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î:');
            } else {
              setState(ctx, 'awaitingTournamentData', 'startDate', startDate);
              // ctx.session.awaitingTournamentData.startDate = startDate;
              ctx.reply('–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î:');
              setState(ctx, 'awaitingTournamentData', 'step', 'endDate');
              // ctx.session.awaitingTournamentData.step = 'endDate';
            }
        // } else if (ctx.session.awaitingTournamentData && ctx.session.awaitingTournamentData.step === 'endDate') {
        } else if (ctx.state.awaitingTournamentData && ctx.state.awaitingTournamentData.step === 'endDate') {
            const endDate = new Date(ctx.message.text);
            if (isNaN(endDate)) {
              ctx.reply('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î:');
            } else {
              setState(ctx, 'awaitingTournamentData', 'endDate', endDate)
              // ctx.session.awaitingTournamentData.endDate = endDate;
              ctx.reply('–í–≤–µ–¥–∏—Ç–µ –±–∞–π-–∏–Ω—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:');
              setState(ctx, 'awaitingTournamentData', 'step', 'buyIns');
              // ctx.session.awaitingTournamentData.step = 'buyIns';

            }

        // } else if (ctx.session.awaitingTournamentData && ctx.session.awaitingTournamentData.step === 'buyIns') {
        } else if (ctx.state.awaitingTournamentData && ctx.state.awaitingTournamentData.step === 'buyIns') {
            setState(ctx, 'awaitingTournamentData', 'buyIns', ctx.message.text.split(','))
            // ctx.session.awaitingTournamentData.buyIns = ctx.message.text.split(',');
            ctx.reply('–¢—É—Ä–Ω–∏—Ä —è–≤–ª—è–µ—Ç—Å—è –ø—É–±–ª–∏—á–Ω—ã–º –∏–ª–∏ –ø—Ä–∏–≤–∞—Ç–Ω—ã–º?', Markup.keyboard(['public', 'private']).oneTime().resize());
            // ctx.session.awaitingTournamentData.step = 'type';
            setState(ctx, 'awaitingTournamentData', 'step', 'type');
          // } else if (ctx.session.awaitingTournamentData && ctx.session.awaitingTournamentData.step === 'type') {
          } else if (ctx.state.awaitingTournamentData && ctx.state.awaitingTournamentData.step === 'type') {
            // ctx.session.awaitingTournamentData.type = ctx.message.text;
            setState(ctx, 'awaitingTournamentData', 'type', ctx.message.text);
            if (ctx.message.text.toLowerCase() === 'private') {
              ctx.reply('–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ —Ç—É—Ä–Ω–∏—Ä–µ:');
              setState(ctx, 'awaitingTournamentData', 'step', 'password')
              // ctx.session.awaitingTournamentData.step = 'password';
            } else {
              // –°–æ–∑–¥–∞–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞
              // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç—É—Ä–Ω–∏—Ä–∞
                let newTournament = new Tournament({
                    name: ctx.state.awaitingTournamentData.name,
                    description: ctx.state.awaitingTournamentData.description,
                    startDate: ctx.state.awaitingTournamentData.startDate,
                    endDate: ctx.state.awaitingTournamentData.endDate,
                    buyIns: ctx.state.awaitingTournamentData.buyIns, // –¥–æ–±–∞–≤–ª–µ–Ω–æ –Ω–æ–≤–æ–µ –ø–æ–ª–µ
                    type: ctx.state.awaitingTournamentData.type, // –¥–æ–±–∞–≤–ª–µ–Ω–æ –Ω–æ–≤–æ–µ –ø–æ–ª–µ
                    password: '', // –¥–æ–±–∞–≤–ª–µ–Ω–æ –Ω–æ–≤–æ–µ –ø–æ–ª–µ
                    image: ctx.state.awaitingTournamentData.imageUrl
                });

                newTournament.save()
                    .then(() => {
                    ctx.reply('–¢—É—Ä–Ω–∏—Ä —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!');


                    deleteStateProperty(ctx, 'awaitingTournamentData');

                    // delete ctx.session.awaitingTournamentData;
                    })
                    .catch(error => console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ç—É—Ä–Ω–∏—Ä–∞:', error));
            }
          } else if (ctx.session.awaitingTournamentData && ctx.session.awaitingTournamentData.step === 'password') {
            ctx.session.awaitingTournamentData.password = ctx.message.text;
            // –°–æ–∑–¥–∞–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞
            // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç—É—Ä–Ω–∏—Ä–∞
            let newTournament = new Tournament({
                name: ctx.session.awaitingTournamentData.name,
                description: ctx.session.awaitingTournamentData.description,
                startDate: ctx.session.awaitingTournamentData.startDate,
                endDate: ctx.session.awaitingTournamentData.endDate,
                buyIns: ctx.session.awaitingTournamentData.buyIns, // –¥–æ–±–∞–≤–ª–µ–Ω–æ –Ω–æ–≤–æ–µ –ø–æ–ª–µ
                type: ctx.session.awaitingTournamentData.type, // –¥–æ–±–∞–≤–ª–µ–Ω–æ –Ω–æ–≤–æ–µ –ø–æ–ª–µ
                password: ctx.session.awaitingTournamentData.type.toLowerCase() === 'private' ? ctx.session.awaitingTournamentData.password : '', // –¥–æ–±–∞–≤–ª–µ–Ω–æ –Ω–æ–≤–æ–µ –ø–æ–ª–µ
                image: ctx.session.awaitingTournamentData.imageUrl
            });

            newTournament.save()
                .then(() => {
                ctx.reply('–¢—É—Ä–Ω–∏—Ä —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!');
                delete ctx.session.awaitingTournamentData;
                })
                .catch(error => console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ç—É—Ä–Ω–∏—Ä–∞:', error));
          }
        
        
        
        else if (ctx.message.text === '–°–æ–∑–¥–∞—Ç—å –æ–ø—Ä–æ—Å') {
      ctx.reply('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–ø—Ä–æ—Å–∞:');
      ctx.session.awaitingPollData = { step: 'name' };
    } else if (ctx.session.awaitingPollData) {
      if (ctx.session.awaitingPollData.step === 'name') {
        ctx.session.awaitingPollData.name = ctx.message.text;
        ctx.reply('–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –æ–ø—Ä–æ—Å–∞:');
        ctx.session.awaitingPollData.step = 'description';
      } else if (ctx.session.awaitingPollData.step === 'description') {
        ctx.session.awaitingPollData.description = ctx.message.text;
        ctx.reply('–í–≤–µ–¥–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –≤–∞—Ä–∏–∞–Ω—Ç_–æ—á–∫–∏, –≤–∞—Ä–∏–∞–Ω—Ç_–æ—á–∫–∏');
        ctx.session.awaitingPollData.step = 'options';
      } else if (ctx.session.awaitingPollData.step === 'options') {
        // –†–∞–∑–¥–µ–ª–∏—Ç–µ –∫–∞–∂–¥—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –ø–æ —Å–∏–º–≤–æ–ª—É "_", —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç –≤–∞—Ä–∏–∞–Ω—Ç–∞ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—á–∫–æ–≤:
        let options = ctx.message.text.split(',');
        for (let i = 0; i < options.length; i++) {
            let [text, points] = options[i].trim().split('_');
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –æ—á–∫–æ–≤ —á–∏—Å–ª–æ–º
            if (isNaN(points)) {
                // –ï—Å–ª–∏ –Ω–µ—Ç, —Å–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ–± –æ—à–∏–±–∫–µ –∏ –ø—Ä–æ—Å–∏–º –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –≤–≤–æ–¥
                ctx.reply('–û—à–∏–±–∫–∞: –∑–Ω–∞—á–µ–Ω–∏–µ –æ—á–∫–æ–≤ –¥–ª—è –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞ "' + text + '" –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥.');
                return;
            }
        }
        // –ï—Å–ª–∏ –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è –æ—á–∫–æ–≤ —è–≤–ª—è—é—Ç—Å—è —á–∏—Å–ª–∞–º–∏, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ–ø—Ü–∏–∏
        ctx.session.awaitingPollData.options = options.map(option => {
            const [text, points] = option.trim().split('_');
            return { text, points: Number(points) };
        });
    
        ctx.reply('–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –∑–∞–∫—Ä—ã—Ç–∏—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≥–æ–ª–æ—Å–æ–≤–∞—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î_–ß–ß:–ú–ú');
        ctx.session.awaitingPollData.step = 'closingDate';
    } else if (ctx.session.awaitingPollData.step === 'closingDate') {
        const closingDate = new Date(ctx.message.text.replace('_', 'T') + ':00.000+03:00'); // –î–æ–±–∞–≤—å—Ç–µ —Å–µ–∫—É–Ω–¥—ã –∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–π—Ç–µ –Ω–∏–∂–Ω–µ–µ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ –æ–±—Ä–∞—Ç–Ω–æ –≤ T
        if (isNaN(closingDate)) {
            ctx.reply('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –∑–∞–∫—Ä—ã—Ç–∏—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≥–æ–ª–æ—Å–æ–≤–∞—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î_–ß–ß:–ú–ú');
        } else {
            ctx.session.awaitingPollData.closingDate = closingDate;
                    // –ù–∞–π–¥–∏—Ç–µ –≤—Å–µ —Ç—É—Ä–Ω–∏—Ä—ã –∏ –ø–æ–∫–∞–∂–∏—Ç–µ –∏—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
            Tournament.find()
            .then(tournaments => {
            const tournamentNames = tournaments.map(tournament => tournament.name);
            ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ —Ç—É—Ä–Ω–∏—Ä, –∫ –∫–æ—Ç–æ—Ä–æ–º—É –æ—Ç–Ω–æ—Å–∏—Ç—Å—è —ç—Ç–æ—Ç –æ–ø—Ä–æ—Å:', Markup.keyboard(tournamentNames).oneTime().resize());
            ctx.session.awaitingPollData.step = 'tournamentName';
            })
            .catch(error => console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ç—É—Ä–Ω–∏—Ä–æ–≤:', error));
        }
  

      } else if (ctx.session.awaitingPollData.step === 'tournamentName') {
        Tournament.findOne({ name: ctx.message.text })
          .then(tournament => {
            if (!tournament) {
              return ctx.reply('–¢—É—Ä–Ω–∏—Ä —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω.');
            }
  
            let newPoll = new Poll({
              name: ctx.session.awaitingPollData.name,
              description: ctx.session.awaitingPollData.description,
              options: ctx.session.awaitingPollData.options,
              closingDate: ctx.session.awaitingPollData.closingDate,
              tournamentId: tournament._id,
              result: ""
            });
  
            newPoll.save()
              .then(() => {
                ctx.reply('–û–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!');
                delete ctx.session.awaitingPollData;
              })
              .catch(error => console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ–ø—Ä–æ—Å–∞:', error));
          })
          .catch(error => console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ç—É—Ä–Ω–∏—Ä–∞:', error));
      }
    }else if (ctx.message.text === '–ü–æ–∫–∞–∑–∞—Ç—å —Ç—É—Ä–Ω–∏—Ä—ã') {
        // –ù–∞–π–¥–∏—Ç–µ –≤—Å–µ —Ç—É—Ä–Ω–∏—Ä—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        Tournament.find()
        .then(tournaments => {
            // –í–∞—à –∫–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–æ–≤...
            for (const tournament of tournaments) {
                // –í–∞—à –∫–æ–¥ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–∞–∂–¥–æ–≥–æ —Ç—É—Ä–Ω–∏—Ä–∞...
            
                // –î–æ–±–∞–≤—å—Ç–µ –¥–≤–µ –Ω–æ–≤—ã–µ –∫–Ω–æ–ø–∫–∏
                ctx.replyWithMarkdown(`*üèÜ ${tournament.name}*...`, // –í–∞—à —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
                Markup.inlineKeyboard([
                    [Markup.button.callback('‚úÖ –û—Ç–∫—Ä—ã—Ç—ã–µ –æ–ø—Ä–æ—Å—ã', `open_polls_${tournament._id}`)],
                    [Markup.button.callback('‚ùå –ó–∞–∫—Ä—ã—Ç—ã–µ –æ–ø—Ä–æ—Å—ã', `closed_polls_${tournament._id}`)],
                    // –í–∞—à–∏ –¥—Ä—É–≥–∏–µ –∫–Ω–æ–ø–∫–∏...
                ])
                );
            }
        })
        .catch(error => console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ç—É—Ä–Ω–∏—Ä–æ–≤:', error));
      } else if (ctx.message.text === '–ó–∞–ø—Ä–æ—Å—ã –Ω–∞ —É—á–∞—Å—Ç–∏–µ') { // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –Ω–æ–≤—É—é –∫–Ω–æ–ø–∫—É
        Registration.find({ status: 'pending' }) // –ù–∞–π—Ç–∏ –≤—Å–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º "pending"
          .then(registrations => {
            // –ï—Å–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã
            if (registrations.length === 0) {
              ctx.reply('–ù–µ—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ —É—á–∞—Å—Ç–∏–µ.');
            } else {
              // –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏—Ö –æ–±—Ä–∞—Ç–Ω–æ –≤ —á–∞—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
              registrations.forEach(registration => {
                ctx.reply(
                  `id: ${registration._id}\n` +
                  `userId: ${registration.userId}\n` +
                  `telegramTag: ${registration.telegramTag}\n` +
                  `tournamentId: ${registration.tournamentId}\n` +
                  `tournamentTitle: ${registration.tournamentTitle}\n` +
                  `buyIn: ${registration.buyIn}\n` +
                  `walletNumber: ${registration.walletNumber}\n` +
                  `status: ${registration.status}`,
                  Markup.inlineKeyboard([
                    Markup.button.callback('–î–æ–ø—É—Å—Ç–∏—Ç—å', `approve_${registration._id}`),
                    Markup.button.callback('–û—Ç–∫–ª–æ–Ω–∏—Ç—å', `reject_${registration._id}`)
                  ])
                );
              });
            }
          })
          .catch(error => console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π:', error));
      }
  }

  function handleUserText(ctx) {


    if (ctx.message.text === 'üîë –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ —Ç—É—Ä–Ω–∏—Ä') {
        // –ù–∞–π–¥–∏—Ç–µ –≤—Å–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        Registration.find({ telegramTag: ctx.from.username })
          .then(async registrations => {
            const registeredTournaments = registrations.map(registration => registration.tournamentId.toString());
      
            // –ù–∞–π–¥–∏—Ç–µ –≤—Å–µ —Ç—É—Ä–Ω–∏—Ä—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            const tournaments = await Tournament.find().sort({ name: 1 });
      
            // –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–∞–∂–¥—ã–π —Ç—É—Ä–Ω–∏—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            for (const tournament of tournaments) {
              const tournamentRegistrations = await Registration.find({ tournamentId: tournament._id });
              const count = tournamentRegistrations.length;
              if (!registeredTournaments.includes(tournament._id.toString())) {
                let message = `*üèÜ ${tournament.name}*\nüìã ${tournament.description}\n\n${tournament.type === 'private' ? 'üîí –ü—Ä–∏–≤–∞—Ç–Ω—ã–π' : 'üîì –ü—É–±–ª–∏—á–Ω—ã–π'}\n\nüö™ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π: ${count}`;
                if (tournament.image) {
                  message += `\n ${tournament.image}`;
                }
                ctx.replyWithMarkdown(message, Markup.inlineKeyboard([
                  Markup.button.callback('‚úÖ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è', `join_${tournament._id}`)
                ]));
              } else {
                const registration = registrations.find(reg => reg.tournamentId.toString() === tournament._id.toString());
                let message = `*üèÜ ${tournament.name}*\nüìã ${tournament.description}\n\n${tournament.type === 'private' ? 'üîí –ü—Ä–∏–≤–∞—Ç–Ω—ã–π' : 'üîì –ü—É–±–ª–∏—á–Ω—ã–π'}\n\nüö™ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π: ${count}\n\n`;
                if (registration.status === 'approved') {
                  message += 'üéüÔ∏è –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ —ç—Ç–æ—Ç —Ç—É—Ä–Ω–∏—Ä.';
                } else if (registration.status === 'pending') {
                  message += '‚è≥ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ —É—á–∞—Å—Ç–∏–µ –∂–¥–µ—Ç –æ–¥–æ–±—Ä–µ–Ω–∏—è.';
                }
                if (tournament.image) {
                  message += `\n ${tournament.image}`;
                }
                ctx.replyWithMarkdown(message);
              }
            }
          })
          .catch(error => console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π:', error));
      }
      else if (ctx.message.text === 'üéÆ –ú–æ–∏ —Ç—É—Ä–Ω–∏—Ä—ã') {
        // –ù–∞–π–¥–∏—Ç–µ –≤—Å–µ –æ–¥–æ–±—Ä–µ–Ω–Ω—ã–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        Registration.find({ telegramTag: ctx.from.username, status: 'approved' })
        .then(async registrations => {
            const registeredTournaments = registrations.map(registration => registration.tournamentId);
            const tournaments = await Tournament.find({ _id: { $in: registeredTournaments } }).sort({ name: 1 });

            if (tournaments.length === 0) {
            ctx.reply('üì¢ –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –Ω–∏ –≤ –æ–¥–Ω–æ–º —Ç—É—Ä–Ω–∏—Ä–µ. –ò—Å–ø—Ä–∞–≤—å—Ç–µ —ç—Ç–æ, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ —Ç—É—Ä–Ω–∏—Ä"üöÄüöÄ');
            } else {
            let delay = 0;
            for (const tournament of tournaments) {
                const registration = await registrations.find(reg => reg.tournamentId.toString() === tournament._id.toString());
                setTimeout(() => {
                ctx.replyWithMarkdown(`*üèÜ ${tournament.name}*\nüìã ${tournament.description}\n\n${tournament.type === 'private' ? 'üîí –ü—Ä–∏–≤–∞—Ç–Ω—ã–π' : 'üîì –ü—É–±–ª–∏—á–Ω—ã–π'}\n\nüí∞ –ë–∞–π-–∏–Ω: ${registration.buyIn}`,
                    Markup.inlineKeyboard([
                    [Markup.button.callback('–ú–∞—Ç—á–∏ –¥–ª—è —Å—Ç–∞–≤–æ–∫', `bets_${tournament._id}`)],
                    [Markup.button.callback('–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–∞—Ç—á–µ–π', `results_${tournament._id}`)],
                    [Markup.button.callback('–¢—É—Ä–Ω–∏—Ä–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ', `standings_${tournament._id}`)]
                    ])
                );
                }, delay);
                delay += 200;
            }
            }
        })
        .catch(error => console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π:', error));
      } else if (ctx.session.awaitingBuyIn) {
        const buyIn = ctx.message.text;
        console.log('–ü–æ–ª—É—á–∏–ª–∏ –±–∞–π–Ω')
        if (buyIn === '–§—Ä–∏') {
          console.log('–ë–∞–π–∏–Ω —Ñ—Ä–∏');
          // –ù–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —Ç–µ–≥—É Telegram
          User.findOne({ telegramTag: ctx.from.username })
            .then(user => {
              if (user) {
                console.log('–ù–∞—à–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
                // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
                let newRegistration = new Registration({
                  userId: user._id, // –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ ID –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                  telegramTag: ctx.from.username,
                  tournamentId: ctx.session.awaitingBuyIn.tournamentId,
                  tournamentTitle: ctx.session.awaitingBuyIn.tournamentTitle,
                  buyIn: buyIn,
                  walletNumber: buyIn === '–§—Ä–∏' ? '' : walletNumber,
                  status: 'approved'
                });
                console.log('—Å–æ–∑–¥–∞–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –Ω–∞—á–∏–Ω–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å')
                // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–æ–≤–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                newRegistration.save()
                  .then(() => {
                    ctx.reply(`–í—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ —Ç—É—Ä–Ω–∏—Ä—É —Å –±–∞–π-–∏–Ω–æ–º ${buyIn}`);
                    delete ctx.session.awaitingBuyIn;
                  })
                  .catch(error => console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', error));
              } else {
                ctx.reply('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º —Ç–µ–≥–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω.');
              }
            })
            .catch(error => console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error));
        } else {
          // –ó–∞–ø—Ä–æ—Å –Ω–æ–º–µ—Ä–∞ –∫–æ—à–µ–ª—å–∫–∞
          ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–∞—à–µ–≥–æ –∫—Ä–∏–ø—Ç–æ –∫–æ—à–µ–ª—å–∫–∞:');
          ctx.session.awaitingWalletNumber = { 
            buyIn,
            tournamentId: ctx.session.awaitingBuyIn.tournamentId,
            tournamentTitle: ctx.session.awaitingBuyIn.tournamentTitle // –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ tournamentTitle
          };
          delete ctx.session.awaitingBuyIn;
        }
      } else if (ctx.session.awaitingWalletNumber) {
        const walletNumber = ctx.message.text;
    
        // –ù–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —Ç–µ–≥—É Telegram
        User.findOne({ telegramTag: ctx.from.username })
          .then(user => {
            if (user) {
              // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
              let newRegistration = new Registration({
                userId: user._id, // –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ ID –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                telegramTag: ctx.from.username,
                tournamentId: ctx.session.awaitingWalletNumber.tournamentId, // –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π tournamentId
                tournamentTitle: ctx.session.awaitingWalletNumber.tournamentTitle,
                buyIn: ctx.session.awaitingWalletNumber.buyIn,
                walletNumber: ctx.session.awaitingWalletNumber.buyIn === '–§—Ä–∏' ? '' : walletNumber,
                status: 'pending'
              });
    
              // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–æ–≤–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
              newRegistration.save()
                .then(() => {
                  ctx.reply(`–í—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ —Ç—É—Ä–Ω–∏—Ä—É —Å –±–∞–π-–∏–Ω–æ–º ${ctx.session.awaitingWalletNumber.buyIn}. –í–∞—à–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–∂–∏–¥–∞–µ—Ç –æ–¥–æ–±—Ä–µ–Ω–∏—è.`);
                  delete ctx.session.awaitingBuyIn;
                  delete ctx.session.awaitingWalletNumber;
                })
                .catch(error => console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', error));
            } else {
              ctx.reply('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º —Ç–µ–≥–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω.');
            }
          })
          .catch(error => console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error));
      } else if (ctx.session.awaitingTournamentPassword) {
        const password = ctx.message.text;
        // –ù–∞–π–¥–∏—Ç–µ —Ç—É—Ä–Ω–∏—Ä –ø–æ ID
        Tournament.findById(ctx.session.awaitingTournamentPassword.tournamentId)
          .then(tournament => {
            if (tournament) {
              // –°—Ä–∞–≤–Ω–∏—Ç–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å —Å –ø–∞—Ä–æ–ª–µ–º —Ç—É—Ä–Ω–∏—Ä–∞
              if (password === tournament.password) {
                // –ï—Å–ª–∏ –ø–∞—Ä–æ–ª–∏ —Å–æ–≤–ø–∞–¥–∞—é—Ç, –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
                
                Registration.findOne({ tournamentId: tournament._id, telegramTag: ctx.from.username })
                    .then(registration => {
                        if (registration) {
                        // –ï—Å–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–æ–±—â–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                        ctx.reply('üéüÔ∏è –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ —ç—Ç–æ—Ç —Ç—É—Ä–Ω–∏—Ä.');
                        } else {
                        // –ï—Å–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–µ—Ç, –ø–æ–∑–≤–æ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è
                        ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –±–∞–π-–∏–Ω:', Markup.keyboard(tournament.buyIns).oneTime().resize());
                        ctx.session.awaitingBuyIn = { 
                            tournamentId: tournament._id,
                            tournamentTitle: tournament.name // –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞
                        };
                        }
                    })
                    .catch(error => console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', error));
                    delete ctx.session.awaitingTournamentPassword;

              } else {
                // –ï—Å–ª–∏ –ø–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç, –ø–æ–ø—Ä–æ—Å–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–≤–µ—Å—Ç–∏ –ø–∞—Ä–æ–ª—å –µ—â–µ —Ä–∞–∑
                ctx.reply('–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
              }
            } else {
              ctx.reply('–¢—É—Ä–Ω–∏—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.');
            }
          })
          .catch(error => console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ç—É—Ä–Ω–∏—Ä–∞:', error));
      }


  }
  
  bot.on('callback_query', (ctx) => {
    const action = ctx.callbackQuery.data.split('_')[0];
    const id = ctx.callbackQuery.data.split('_')[1];

    if (ctx.callbackQuery.data.startsWith('open_polls_')) {
        // –ò–∑–≤–ª–µ–∫–∏—Ç–µ id —Ç—É—Ä–Ω–∏—Ä–∞ –∏–∑ –¥–∞–Ω–Ω—ã—Ö callbackQuery
        const id = ctx.callbackQuery.data.split('_')[2];
      
        // –ù–∞–π–¥–∏—Ç–µ –≤—Å–µ –æ—Ç–∫—Ä—ã—Ç—ã–µ –æ–ø—Ä–æ—Å—ã –¥–ª—è —ç—Ç–æ–≥–æ —Ç—É—Ä–Ω–∏—Ä–∞
        const now = new Date();
        Poll.find({ tournamentId: id, closingDate: { $gt: now } })
          .then(async polls => {
            const tournament = await Tournament.findById(id);
            if (tournament) {
              await ctx.reply(`üîΩüîΩüîΩ –û—Ç–∫—Ä—ã—Ç—ã–µ –æ–ø—Ä–æ—Å—ã –¥–ª—è —Ç—É—Ä–Ω–∏—Ä–∞ "${tournament.name}" üîΩüîΩüîΩ`);
            }
            if (polls.length === 0) {
              ctx.reply('–£ —ç—Ç–æ–≥–æ —Ç—É—Ä–Ω–∏—Ä–∞ –ø–æ–∫–∞ –Ω–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –æ–ø—Ä–æ—Å–æ–≤.');
            } else {
                for (const poll of polls) {
                let options = '';
                poll.options.forEach((option, index) => {
                  options += `–í–∞—Ä–∏–∞–Ω—Ç ${index + 1}: ${option}\n`;
                });
                await ctx.replyWithMarkdown(
                  `*Name*: ${poll.name}\n` +
                  `*Descr*: ${poll.description}\n` +
                  `${options}` +
                  `*Votes*: ${poll.votesCount}\n` +
                  `*Close*: ${poll.closingDate}\n` +
                  `*–¢—É—Ä–Ω–∏—Ä*: ${tournament.name}`
                );
              };
            }
          })
          .catch(error => console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –æ–ø—Ä–æ—Å–æ–≤:', error));
      }

      if (ctx.callbackQuery.data.startsWith('closed_polls_')) {
        // –ò–∑–≤–ª–µ–∫–∏—Ç–µ id —Ç—É—Ä–Ω–∏—Ä–∞ –∏–∑ –¥–∞–Ω–Ω—ã—Ö callbackQuery
        const id = ctx.callbackQuery.data.split('_')[2];
        
        // –ù–∞–π–¥–∏—Ç–µ –≤—Å–µ –∑–∞–∫—Ä—ã—Ç—ã–µ –æ–ø—Ä–æ—Å—ã –¥–ª—è —ç—Ç–æ–≥–æ —Ç—É—Ä–Ω–∏—Ä–∞
        const now = new Date();
        Poll.find({ tournamentId: id, closingDate: { $lt: now } })
          .then(async polls => {
            const tournament = await Tournament.findById(id);
            if (tournament) {
              await ctx.reply(`üö®üö®üö® –ó–∞–∫—Ä—ã—Ç—ã–µ –æ–ø—Ä–æ—Å—ã –¥–ª—è —Ç—É—Ä–Ω–∏—Ä–∞ "${tournament.name}" üö®üö®üö®`);
            }
            if (polls.length === 0) {
              ctx.reply('–£ —ç—Ç–æ–≥–æ —Ç—É—Ä–Ω–∏—Ä–∞ –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫—Ä—ã—Ç—ã—Ö –æ–ø—Ä–æ—Å–æ–≤.');
            } else {
            for (const poll of polls) {
                let options = '';
                let optionButtons = [];
                poll.options.forEach((option, index) => {
                  options += `–í–∞—Ä–∏–∞–Ω—Ç ${index + 1}: ${option.text}, –û—á–∫–∏: ${option.points}\n\n`;
                  optionButtons.push(Markup.button.callback(`${option.text} (${option.points} –æ—á–∫–æ–≤)`, `adminResult_${poll._id}_${index}`));
                });
                await  ctx.replyWithMarkdown(
                  `Name: ${poll.name}\n` +
                  `Descr: ${poll.description}\n\n` +
                  `${options}` +
                  `Close: ${poll.closingDate}\n` +
                  `–¢—É—Ä–Ω–∏—Ä: ${tournament.name}` +
                  `\n\n\n\‚ö†Ô∏è‚ö†Ô∏è –í–ù–ò–ú–ê–¢–ï–õ–¨–ù–û! ‚ö†Ô∏è‚ö†Ô∏è –ù–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç! ‚ö†Ô∏è‚ö†Ô∏è` +
                  (poll.result ? `\n\n‚ùó‚ùó‚ùó –í–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç —É–∂–µ —É–∫–∞–∑–∞–Ω: ${poll.result}` : ''),
                  Markup.inlineKeyboard(optionButtons)
                );
                };
            }
          })
          .catch(error => console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∑–∞–∫—Ä—ã—Ç—ã—Ö –æ–ø—Ä–æ—Å–æ–≤:', error));
      }

      if (ctx.callbackQuery.data.startsWith('adminResult_')) {
        const parts = ctx.callbackQuery.data.split('_');
        const pollId = parts[1];
        const optionIndex = Number(parts[2]);
      
        // –ù–∞–π–¥–∏—Ç–µ –æ–ø—Ä–æ—Å –ø–æ ID
        Poll.findById(pollId)
          .then(async poll => {
            if (poll) {
              // –ü–æ–ª—É—á–∏—Ç–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞
              const selectedOption = poll.options[optionIndex];
      
              // –û–±–Ω–æ–≤–∏—Ç–µ –ø–æ–ª–µ result –æ–ø—Ä–æ—Å–∞
              poll.result = selectedOption.text;
              await poll.save();
      
              console.log('–û–ø—Ä–æ—Å –æ–±–Ω–æ–≤–ª–µ–Ω');
      
              // –ù–∞–π–¥–∏—Ç–µ —Ç—É—Ä–Ω–∏—Ä –ø–æ ID
              const tournament = await Tournament.findById(poll.tournamentId);
      
              // –û–±–Ω–æ–≤–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
              let options = '';
              let optionButtons = [];
              poll.options.forEach((option, index) => {
                options += `–í–∞—Ä–∏–∞–Ω—Ç ${index + 1}: ${option.text}, –û—á–∫–∏: ${option.points}\n\n`;
                optionButtons.push(Markup.button.callback(`${option.text} (${option.points} –æ—á–∫–æ–≤)`, `adminResult_${poll._id}_${index}`));
              });
              ctx.editMessageText(
                `Name: ${poll.name}\n` +
                `Descr: ${poll.description}\n\n` +
                `${options}` +
                `Close: ${poll.closingDate}\n` +
                `–¢—É—Ä–Ω–∏—Ä: ${tournament.name}` +
                `\n\n\n\‚ö†Ô∏è‚ö†Ô∏è –í–ù–ò–ú–ê–¢–ï–õ–¨–ù–û! ‚ö†Ô∏è‚ö†Ô∏è –ù–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç! ‚ö†Ô∏è‚ö†Ô∏è` +
                `\n\n‚ùó‚ùó‚ùó –í–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç: ${poll.result}`,
                Markup.inlineKeyboard(optionButtons)
              );
      
              // –û—Ç–ø—Ä–∞–≤—å—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram
              ctx.answerCbQuery('–í–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç –¥–ª—è –æ–ø—Ä–æ—Å–∞ —É–∫–∞–∑–∞–Ω');
            }
          })
          .catch(error => console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –æ–ø—Ä–æ—Å–∞:', error));
      }

      if (action === 'approve') {
        // –ù–∞–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –ø–æ ID
        Registration.findById(id)
          .then(registration => {
            if (!registration) {
              // –ï—Å–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, —Å–æ–æ–±—â–∏—Ç—å –æ–± —ç—Ç–æ–º
              ctx.reply(`–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è ${id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.`);
            } else {
              // –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞ 'approved'
              Registration.updateOne({ _id: id }, { status: 'approved' })
                .then(() => ctx.reply(`–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è ${id} –±—ã–ª–∞ –æ–¥–æ–±—Ä–µ–Ω–∞.`))
                .catch(error => console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', error));
            }
          })
          .catch(error => console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', error));
    }
    
    if (action === 'reject') {
        // –ù–∞–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –ø–æ ID
        Registration.findById(id)
          .then(registration => {
            if (!registration) {
              // –ï—Å–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, —Å–æ–æ–±—â–∏—Ç—å –æ–± —ç—Ç–æ–º
              ctx.reply(`–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è ${id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.`);
            } else {
              // –£–¥–∞–ª–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
              Registration.deleteOne({ _id: id })
                .then(() => ctx.reply(`–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è ${id} –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.`))
                .catch(error => console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', error));
            }
          })
          .catch(error => console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', error));
    }


    if (ctx.callbackQuery.data.startsWith('join_')) {
        const tournamentId = ctx.callbackQuery.data.slice(5);
        // –ù–∞–π—Ç–∏ —Ç—É—Ä–Ω–∏—Ä –ø–æ ID
        Tournament.findById(tournamentId)
          .then(async tournament => {
            if (tournament) {
                // –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç—É—Ä–Ω–∏—Ä –ø—Ä–∏–≤–∞—Ç–Ω—ã–º
                ///
                if (tournament.type === "private") {
                    // –ï—Å–ª–∏ —Ç—É—Ä–Ω–∏—Ä –ø—Ä–∏–≤–∞—Ç–Ω—ã–π, –ø–æ–ø—Ä–æ—Å–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–≤–µ—Å—Ç–∏ –ø–∞—Ä–æ–ª—å
                    // –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ –ø—Ä–∏–≤–∞—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –æ–ø–±—Ä–∞–±–æ—Ç—á–∏–∫–µ —Ç–µ–∫—Å—Ç–∞ –ø–∞—Ä–æ–ª—è –æ—Ç —é–∑–µ—Ä–∞
                    await ctx.reply('–≠—Ç–æ—Ç —Ç—É—Ä–Ω–∏—Ä —è–≤–ª—è–µ—Ç—Å—è –ø—Ä–∏–≤–∞—Ç–Ω—ã–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.');
                    ctx.session.awaitingTournamentPassword = {
                      tournamentId: tournamentId
                    };
                  } else {
                    console.log('–ø—É–±–ª–∏—á–Ω—ã–π');
                    // –ï—Å–ª–∏ —Ç—É—Ä–Ω–∏—Ä –ø—É–±–ª–∏—á–Ω—ã–π, –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∫–∞–∫ –æ–±—ã—á–Ω–æ
                                  // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞ —ç—Ç–æ—Ç —Ç—É—Ä–Ω–∏—Ä
                    Registration.findOne({ tournamentId: tournament._id, telegramTag: ctx.from.username })
                    .then(registration => {
                        if (registration) {
                        // –ï—Å–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–æ–±—â–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                        ctx.reply('üéüÔ∏è –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ —ç—Ç–æ—Ç —Ç—É—Ä–Ω–∏—Ä.');
                        } else {
                          console.log('–ü–æ–ø–∞–ª–∏ –Ω–∞ –≤—ã–±–æ—Ä –±–∞–π–∏–Ω–∞')
                        // –ï—Å–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–µ—Ç, –ø–æ–∑–≤–æ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è
                        ctx.session.awaitingBuyIn = { 
                            tournamentId: tournament._id,
                            tournamentTitle: tournament.name
                          };
                
                        setTimeout(() => {
                          ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –±–∞–π-–∏–Ω:', Markup.keyboard(tournament.buyIns).oneTime().resize());
                        }, 300)
                        

                        console.log(tournament._id)
                        console.log(tournament.name)
                   
                          
                        
                        }
                    })
                    .catch(error => console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', error));
                  }
                  ///
            } else {
              ctx.reply('–¢—É—Ä–Ω–∏—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.');
            }
          })
          .catch(error => console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ç—É—Ä–Ω–∏—Ä–∞:', error));
        ctx.answerCbQuery();
      }



      // USER ZONE 
      ///////////
      ///////////
      ///////////
      ///////////


      if (ctx.callbackQuery.data.startsWith('bets_')) {
        const tournamentId = ctx.callbackQuery.data.slice(5);
        // –ù–∞–π–¥–∏—Ç–µ –≤—Å–µ –æ–ø—Ä–æ—Å—ã –¥–ª—è —ç—Ç–æ–≥–æ —Ç—É—Ä–Ω–∏—Ä–∞
        Poll.find({ tournamentId: tournamentId }).sort('_id')
          .then(async polls => {
            const tournament = await Tournament.findById(tournamentId);
            // –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–≤–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º —Ç—É—Ä–Ω–∏—Ä–∞
            await ctx.reply(`üö®üé≤ –ú–∞—Ç—á–∏ –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –≤ —Ç—É—Ä–Ω–∏—Ä–µ "${tournament.name}".üé≤üö® –ë—É–¥—å—Ç–µ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω—ã –∏ —É–¥–∞—á–∏! üí∏üí∏üí∏`);
            if (polls.length === 0) {
              // –ï—Å–ª–∏ –æ–ø—Ä–æ—Å–æ–≤ –Ω–µ—Ç, —Å–æ–æ–±—â–∏—Ç—å –æ–± —ç—Ç–æ–º
              ctx.reply('–£ —ç—Ç–æ–≥–æ —Ç—É—Ä–Ω–∏—Ä–∞ –ø–æ–∫–∞ –Ω–µ—Ç –º–∞—Ç—á–µ–π.');
            } else {
              let activePolls = false; 
              // –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–∞–∂–¥—ã–π –æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
              for (const poll of polls) { 
                // –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –Ω–µ –∏—Å—Ç–µ–∫–ª–æ –ª–∏ –≤—Ä–µ–º—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
                if (new Date(poll.closingDate) > new Date()) { 
                  activePolls = true;
                  let options = '';
                  poll.options.forEach((option, index) => {
                    options += `–í–∞—Ä–∏–∞–Ω—Ç ${index + 1}: ${option.text} - ${option.points} points\n`;
                  });
                  const buttons = poll.options.map((option, index) => Markup.button.callback(`${option.text} - ${option.points} points`, `vote_${poll._id}_${index}`));
                  
                  // –ù–∞–π–¥–∏—Ç–µ –≥–æ–ª–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —ç—Ç–æ–º –æ–ø—Ä–æ—Å–µ
                  const vote = await Vote.findOne({ pollId: poll._id, userTag: ctx.from.username }); 
                  
                  let voteInfo = '';
                  if (vote) {
                    // –ï—Å–ª–∏ –≥–æ–ª–æ—Å –Ω–∞–π–¥–µ–Ω, –¥–æ–±–∞–≤—å—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥–æ–ª–æ—Å–µ
                    voteInfo = `\n\n‚úÖ –í—ã —É–∂–µ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏ –≤ —ç—Ç–æ–º –æ–ø—Ä–æ—Å–µ. –í–∞—à –≤—ã–±–æ—Ä: ${poll.options[vote.optionNumber].text}`;
                  }
                  
                  // –†–∞—Å—Å—á–∏—Ç–∞–π—Ç–µ –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è –¥–æ –∑–∞–∫—Ä—ã—Ç–∏—è –æ–ø—Ä–æ—Å–∞
                  const timeLeft = new Date(poll.closingDate) - new Date();
                  const daysLeft = Math.floor(timeLeft / (1000 * 60 * 60 * 24));
                  const hoursLeft = Math.floor((timeLeft % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
                  const minutesLeft = Math.floor((timeLeft % (1000 * 60 * 60)) / (1000 * 60));
                  
                  await ctx.replyWithMarkdown( 
                    `üìä –¢—É—Ä–Ω–∏—Ä: ${tournament.name}\n\n` +
                    `üî• –ú–∞—Ç—á: ${poll.name}\n` +
                    `üìã –û–ø–∏—Å–∞–Ω–∏–µ –º–∞—Ç—á–∞: ${poll.description}\n\n` +
                    `${options}` +
                    `\n\n‚è∞ –û–ø—Ä–æ—Å –∑–∞–∫—Ä–æ–µ—Ç—Å—è —á–µ—Ä–µ–∑: ${daysLeft} –¥–Ω–µ–π ${hoursLeft} —á–∞—Å–æ–≤ ${minutesLeft} –º–∏–Ω—É—Ç` +
                    voteInfo, // –ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç–µ voteInfo —Å—é–¥–∞
                    Markup.inlineKeyboard(buttons, { columns: 1 })
                  );
                }
              }

              if (!activePolls) {
                // –ï—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–ø—Ä–æ—Å–æ–≤, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —ç—Ç–æ–º
                ctx.reply('–ù–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –º–∞—Ç—á–µ–π –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç.');
              }


            }
          })
          .catch(error => console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –æ–ø—Ä–æ—Å–æ–≤:', error));
      }

      
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ callback_query –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 'vote_'
        if (ctx.callbackQuery.data.startsWith('vote_')) {
            // –ò–∑–≤–ª–µ–∫–∞–µ–º ID –æ–ø—Ä–æ—Å–∞ –∏ –Ω–æ–º–µ—Ä –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –∏–∑ callback_query
            const [_, pollId, optionNumber] = ctx.callbackQuery.data.split('_');
          
            // –ù–∞—Ö–æ–¥–∏–º –æ–ø—Ä–æ—Å –ø–æ ID
            Poll.findById(pollId)
            .then(poll => {
              if (poll) {
                // –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –Ω–µ –∏—Å—Ç–µ–∫–ª–æ –ª–∏ –≤—Ä–µ–º—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
                if (new Date(poll.closingDate) > new Date()) {
                  // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —Ç–µ–≥—É Telegram
                  User.findOne({ telegramTag: ctx.from.username })
                    .then(user => {
                      if (user) {
                        // –ù–∞—Ö–æ–¥–∏–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Ç—É—Ä–Ω–∏—Ä
                        Registration.findOne({ userId: user._id, tournamentId: poll.tournamentId })
                          .then(registration => {
                            if (registration) {
                              // –ù–∞—Ö–æ–¥–∏–º –≥–æ–ª–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —ç—Ç–æ–º –æ–ø—Ä–æ—Å–µ
                              Vote.findOne({ pollId: poll._id, userId: user._id })
                                .then(vote => {
                                  if (vote) {
                                    // –ï—Å–ª–∏ –≥–æ–ª–æ—Å –Ω–∞–π–¥–µ–Ω, –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ
                                    vote.optionNumber = optionNumber;
                                    vote.optionText = poll.options[optionNumber].text;
                                    vote.optionPoints = poll.options[optionNumber].points; // –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—á–∫–æ–≤
                                    vote.save()
                                    .then(() => {
                                      ctx.answerCbQuery('–í–∞—à –≥–æ–ª–æ—Å –±—ã–ª –æ–±–Ω–æ–≤–ª–µ–Ω!');
          
                                      // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                                      let oldText = ctx.callbackQuery.message.text;
                                      // –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–Ω–æ–ø–∫–∏
                                      const oldMarkup = ctx.callbackQuery.message.reply_markup;
                                      // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥–æ–ª–æ—Å–µ, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
                                      const voteInfoIndex = oldText.indexOf('\n\n‚úÖ –í—ã —É–∂–µ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏ –≤ —ç—Ç–æ–º –æ–ø—Ä–æ—Å–µ.');
                                      if (voteInfoIndex !== -1) {
                                        oldText = oldText.substring(0, voteInfoIndex);
                                      }
                                      // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥–æ–ª–æ—Å–µ
                                      const newText = `${oldText}\n\n‚úÖ –í—ã —É–∂–µ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏ –≤ —ç—Ç–æ–º –æ–ø—Ä–æ—Å–µ. –í–∞—à –≤—ã–±–æ—Ä: ${poll.options[optionNumber].text}`;
                                      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –ª–∏ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –æ—Ç —Å—Ç–∞—Ä–æ–≥–æ
                                      if (newText !== ctx.callbackQuery.message.text) {
                                        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
                                        ctx.editMessageText(newText, { reply_markup: oldMarkup })
                                          .catch(error => console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è:', error));
                                      }
          
                                    })
                                    .catch(error => console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≥–æ–ª–æ—Å–∞:', error));
                                  } else {
                                    // –ï—Å–ª–∏ –≥–æ–ª–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
                                    let newVote = new Vote({
                                      tournamentId: poll.tournamentId,
                                      tournamentName: poll.name,
                                      pollId: poll._id,
                                      pollName: poll.name,
                                      userId: user._id,
                                      userTag: ctx.from.username,
                                      userName: ctx.from.first_name,
                                      buyIn: registration.buyIn,
                                      optionNumber: optionNumber,
                                      optionText: poll.options[optionNumber].text,
                                      optionPoints: poll.options[optionNumber].points // –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—á–∫–æ–≤
                                    });
          
                                    newVote.save()
                                    .then(() => {
                                      ctx.answerCbQuery('–í–∞—à –≥–æ–ª–æ—Å –±—ã–ª —É—á—Ç–µ–Ω!');
          
                                      // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                                      let oldText = ctx.callbackQuery.message.text;
                                      // –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–Ω–æ–ø–∫–∏
                                      const oldMarkup = ctx.callbackQuery.message.reply_markup;
                                      // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥–æ–ª–æ—Å–µ
                                      const newText = `${oldText}\n\n‚úÖ –í—ã —É–∂–µ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏ –≤ —ç—Ç–æ–º –æ–ø—Ä–æ—Å–µ. –í–∞—à –≤—ã–±–æ—Ä: ${poll.options[optionNumber].text}`;
                                      // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
                                      ctx.editMessageText(newText, { reply_markup: oldMarkup })
                                        .catch(error => console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è:', error));
          
                                    })
                                    .catch(error => console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≥–æ–ª–æ—Å–∞:', error));
                                  }
                                })
                                .catch(error => console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –≥–æ–ª–æ—Å–∞:', error));
                            } else {
                              ctx.answerCbQuery('–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ —ç—Ç–æ—Ç —Ç—É—Ä–Ω–∏—Ä.');
                            }
                          })
                          .catch(error => console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', error));
                      } else {
                        ctx.answerCbQuery('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º —Ç–µ–≥–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω.');
                      }
                    })
                    .catch(error => console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error));
                } else {
                  ctx.answerCbQuery('–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –≤—Ä–µ–º—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –≤ —ç—Ç–æ–º –æ–ø—Ä–æ—Å–µ —É–∂–µ –∏—Å—Ç–µ–∫–ª–æ.');
                }
              } else {
                ctx.answerCbQuery('–û–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.');
              }
            })
            .catch(error => console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –æ–ø—Ä–æ—Å–∞:', error));
          }




          if (ctx.callbackQuery.data.startsWith('results_')) {
            // –ò–∑–≤–ª–µ–∫–∞–µ–º ID —Ç—É—Ä–Ω–∏—Ä–∞ –∏–∑ callback_query
            const [_, tournamentId] = ctx.callbackQuery.data.split('_');
          
            // –ù–∞—Ö–æ–¥–∏–º —Ç—É—Ä–Ω–∏—Ä –ø–æ –µ–≥–æ ID
            Tournament.findById(tournamentId)
              .then(tournament => {
                // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –æ–ø—Ä–æ—Å—ã —ç—Ç–æ–≥–æ —Ç—É—Ä–Ω–∏—Ä–∞
                Poll.find({ tournamentId: tournamentId })
                  .then(polls => {
                    // –§–∏–ª—å—Ç—Ä—É–µ–º –æ–ø—Ä–æ—Å—ã, –æ—Å—Ç–∞–≤–ª—è—è —Ç–æ–ª—å–∫–æ —Ç–µ, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –∑–∞–∫—Ä—ã—Ç—ã
                    const closedPolls = polls.filter(poll => new Date(poll.closingDate) < new Date());
          

                    if (closedPolls.length === 0) {
                        ctx.reply(`üëÄ–í —Ç—É—Ä–Ω–∏—Ä–µ "${tournament.name}" –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫—Ä—ã—Ç—ã—Ö –æ–ø—Ä–æ—Å–æ–≤üëÄ`);
                    } else {
                        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å—Ç—É–ø–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º —Ç—É—Ä–Ω–∏—Ä–∞
                        ctx.reply(`üí∞üëÄ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∑–∞–∫—Ä—ã—Ç—ã—Ö –º–∞—Ç—á–µ–π –≤ —Ç—É—Ä–Ω–∏—Ä–µ "${tournament.name}".üí∞üëÄ`);
                                
                        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—ã–π –∑–∞–∫—Ä—ã—Ç—ã–π –æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                        closedPolls.forEach(poll => {
                            // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –≥–æ–ª–æ—Å–∞ –¥–ª—è —ç—Ç–æ–≥–æ –æ–ø—Ä–æ—Å–∞
                            Vote.find({ pollId: poll._id })
                            .then(votes => {
                                // –°–æ–∑–¥–∞–µ–º –º–∞—Å—Å–∏–≤ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
                                let voteResults = [];

                                // –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –∫–∞–∂–¥–æ–º—É –≤–∞—Ä–∏–∞–Ω—Ç—É –æ—Ç–≤–µ—Ç–∞ –≤ –æ–ø—Ä–æ—Å–µ
                                poll.options.forEach((option, index) => {
                                // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –≥–æ–ª–æ—Å–∞ –∑–∞ —ç—Ç–æ—Ç –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞
                                const votesForOption = votes.filter(vote => vote.optionNumber === index);

                                // –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –∑–∞ —ç—Ç–æ—Ç –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞ –≤ –º–∞—Å—Å–∏–≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                                voteResults.push({
                                    optionText: option.text,
                                    optionPoints: option.points,
                                    votesCount: votesForOption.length
                                });
                                });

                                // –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –≥–æ–ª–æ—Å–æ–≤
                                voteResults.sort((a, b) => b.votesCount - a.votesCount);

                                // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
                                let message = `*ü•á ${poll.name}*\nüìù ${poll.description}\n\nüïí –í—Ä–µ–º—è –∑–∞–∫—Ä—ã—Ç–∏—è: ${poll.closingDate}\n\nüë• –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è:\n`;
                                voteResults.forEach(result => {
                                message += `\n${result.optionText}: ${result.votesCount} –≥–æ–ª–æ—Å–æ–≤ (${result.optionPoints} –æ—á–∫–æ–≤)`;
                                });

                                // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –≥–æ–ª–æ—Å–æ–≤–∞–ª–∏ –≤ –æ–ø—Ä–æ—Å–µ
                                let votersList = '\n\nüîó –°—Å—ã–ª–∫–∞ –Ω–∞ —Å–ø–∏—Å–æ–∫ –≥–æ–ª–æ—Å–æ–≤–∞–≤—à–∏—Ö –∏–≥—Ä–æ–∫–æ–≤ –∏ –∏—Ö –≤—ã–±–æ—Ä: ‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è\n';

                                // votes.forEach(vote => {
                                //     votersList += `\n–ò–≥—Ä–æ–∫: ${vote.userName} –í—ã–±—Ä–∞–ª: ${poll.options[vote.optionNumber].text}`;
                                // });

                                // –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –≥–æ–ª–æ—Å–æ–≤–∞–≤—à–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∫ —Å–æ–æ–±—â–µ–Ω–∏—é
                                message += votersList;

                                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                                ctx.replyWithMarkdown(message);
                            })
                            .catch(error => console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –≥–æ–ª–æ—Å–æ–≤:', error));
                        });
                    }

                  })
                  .catch(error => console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –æ–ø—Ä–æ—Å–æ–≤:', error));
              })
              .catch(error => console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ç—É—Ä–Ω–∏—Ä–∞:', error));
          }

  });


  bot.command('/cancel', (ctx) => {
    fs.writeFileSync(path.join(__dirname, 'session_db.json'), JSON.stringify({}));
    ctx.reply('–ü—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω.');
    ctx.session.awaitingTournamentData = null;
    ctx.session.awaitingPollData = null;
    ctx.session = null;
    ctx.reply('–ü—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω.');
  });



connectDB().then(() => bot.launch());